#include "MappedRead.hpp"
#include "htslib_wrapper.hpp"
#include "smithlab_utils.hpp"
#include "smithlab_os.hpp"
#include "OptionParser.hpp"
#include "dna_four_bit.hpp"
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>

using std::string;
using std::vector;
using std::cerr;
using std::cout;
using std::endl;
using std::ifstream;
using std::ofstream;
using std::runtime_error;
using std::istringstream;

void
erase_frag_from_name(sam_rec &aln) {
  if (aln.qname.find("FRAG:") == 0)
    aln.qname.erase(0, 5);
}

int
main(int argc, const char **argv) {
  bool VERBOSE;
  string outfile;
  string headers_file;
  OptionParser opt_parse(strip_path(argv[0]),
                        "convert mr files to sam","<mr-input>");
  vector<string> leftover_args;
  opt_parse.add_opt("verbose", 'v', "print more run info", false, VERBOSE);
  opt_parse.add_opt("output", 'o', "output sam file", true, outfile);
  opt_parse.add_opt("header", 'h', "genome headers file, generated by"
                    " running samtools faidx on the reference genome",
                    true, headers_file);

  opt_parse.parse(argc, argv, leftover_args);
  if (opt_parse.about_requested()) {
      cerr << opt_parse.about_message() << endl;
      return EXIT_SUCCESS;
  }
  if (opt_parse.option_missing()) {
    cerr << opt_parse.option_missing_message() << endl;
    cerr << opt_parse.help_message() << endl;
    return EXIT_SUCCESS;
  }

  if (leftover_args.size() != 1) {
    cerr << "please provide the input mr file\n";
    cerr << opt_parse.option_missing_message() << endl;
    cerr << opt_parse.help_message() << endl;
    return EXIT_SUCCESS;
  }

  string infile = leftover_args.front();
  ifstream in(infile);
  if (!in.good()) {
    throw runtime_error("File could not be opened: " + infile);
  }

  ifstream in_headers(headers_file);
  if (!in_headers.good()) {
    throw runtime_error("Headers file could not be opened: " + headers_file);
  }


  std::ofstream of;
  if (!outfile.empty()) of.open(outfile.c_str());
  std::ostream out(outfile.empty() ? cout.rdbuf() : of.rdbuf());

  // read fai headers to make sam headers
  of << "@HD\tVN:1.0\n";
  string header_line;
  string name, length, offset, linebases, linewidth;
  while (getline(in_headers, header_line)) {
    istringstream iss(header_line);
    if (!(iss >> name >> length >> offset >> linebases >> linewidth))
      throw runtime_error("Malformated header line: " + header_line);
    
    of << "@SQ\tSN:" << name << "\tLN:" << length << "\n";
  }
  of << "@PG\tID:WALT\tVN:1.0\n";
  in_headers.close();

  // now read mr file and convert
  MappedRead mr;
  while (in >> mr) {
    sam_rec aln(mr.r.get_name(), //qname
                0, // flags
                mr.r.get_chrom(),
                mr.r.get_start() + 1, // sam is 1-based, mr is 0-based
                255,
                std::to_string(mr.seq.size()) + "M",
                "*",
                0,
                0,
                mr.seq,
                mr.scr
               );
    if (mr.r.get_strand() == '-')
      set_flag(aln, samflags::read_rc);
    aln.add_tag("NM:i:" + std::to_string(static_cast<size_t>(mr.r.get_score())));
    aln.add_tag("CV:A:T");

    erase_frag_from_name(aln);
    of << aln << '\n';
  }

  return EXIT_SUCCESS;
}
